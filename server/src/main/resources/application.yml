# SERVER ENDPOINT
server:
  port: ${OMC_SERVER_PORT:7979}
  servlet:
    session:
      cookie:
        name: ${OMC_SERVER_SERVLET_SESSION_COOKIE_NAME:ORGMANAGERSESSIONID}

# SPRING CONFIGURATION
spring:
  datasource:
    url: ${OMC_SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/orgmanager}
    username: ${OMC_SPRING_DATASOURCE_USERNAME:postgres}
    password: ${OMC_SPRING_DATASOURCE_PASSWORD:password}
    driver-class-name: ${OMC_SPRING_DATASOURCE_DRIVERCLASSNAME:org.postgresql.Driver}
  jpa:
    database-platform: ${OMC_SPRING_JPA_DATABASEPLATFORM:org.hibernate.dialect.PostgreSQLDialect}
    generate-ddl: ${OMC_SPRING_JPA_GENERATEDDL:true}
    hibernate:
      ddl-auto: ${OMC_SPRING_JPA_HIBERNATE_DDLAUTO:update}
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: ${OMC_SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_LOB_NONCONTEXTUALCREATION:true}

# OAUTH INTEGRATION
security:
  oauth2:
    client:
      clientId: ${OMC_SECURITY_OAUTH2_CLIENT_CLIENTID:b24e4974-6a9b-404a-a6df-aafc3172f6e8}
      clientSecret: ${OMC_SECURITY_OAUTH2_CLIENT_CLIENTSECRET:a4da64d0-8191-4ee9-9f59-316cdb3d07d2}
      accessTokenUri: ${OMC_SECURITY_OAUTH2_CLIENT_ACCESSTOKENURI:http://localhost:8080/aac/oauth/token}
      userAuthorizationUri: ${OMC_SECURITY_OAUTH2_CLIENT_USERAUTHORIZATIONURI:http://localhost:8080/aac/oauth/authorize}
      tokenInfoUri: ${OMC_SECURITY_OAUTH2_CLIENT_TOKENINFOURI:http://localhost:8080/aac/token_introspection}
      tokenName: ${OMC_SECURITY_OAUTH2_CLIENT_TOKENNAME:token}
      userIdField: ${OMC_SECURITY_OAUTH2_CLIENT_USERIDFIELD:aac_user_id}
      authenticationScheme: ${OMC_SECURITY_OAUTH2_CLIENT_AUTHENTICATIONSCHEME:query}
      clientAuthenticationScheme: ${OMC_SECURITY_OAUTH2_CLIENT_CLIENTAUTHENTICATIONSCHEME:form}
      organizationManagementScope: ${OMC_SECURITY_OAUTH2_CLIENT_ORGANIZATIONMANAGEMENTSCOPE:organization.mgmt}
      organizationManagementContext: ${OMC_SECURITY_OAUTH2_CLIENT_ORGANIZATIONMANAGEMENTCONTEXT:components}
    resource:
      userInfoUri: ${OMC_SECURITY_OAUTH2_RESOURCE_USERINFOURI:profile.basicprofile.me}

# AAC APIS
aac:
  uri: ${OMC_AAC_URI:http://localhost:8080/aac/}
  apis:
    manageRolesApi: ${OMC_AAC_APIS_MANAGEROLESAPI:userroles/user}
    userProfilesApi: ${OMC_AAC_APIS_USERPROFILESAPI:basicprofile/all}
    currentUserRolesApi: ${OMC_AAC_APIS_CURRENTUSERROLESAPI:userroles/me}
    currentUserProfileApi: ${OMC_AAC_APIS_CURRENTUSERPROFILEAPI:basicprofile/me}

# LOGGING
logging:
  level:
    org.springframework.security: ${OMC_LOGGING_LEVEL_ORGSPRINGFRAMEWORKSECURITY:DEBUG}

# SWAGGER
swagger:
  title:
    orgmanager: Organization Management API
  description:
    orgmanager: Organization Management API
  version: 1.0.0
  license: Apache License, Version 2.0
  licenseUrl: http://www.apache.org/licenses/LICENSE-2.0
  contact:
    name:  Smart Community Lab
    url: www.smartcommunitylab.it
    email: info@smartcommunitylab.it

# COMPONENTS DATA
componentsconfig:
  components:
    # API Manager
    - name: API Manager
      componentId: apimanager
      scope: apimanager
      format: ^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$
      implementation: it.smartcommunitylab.apimconnector.ApiMConnector
      roles: ROLE_MANAGER,ROLE_USER
      host: https://localhost:9443
      usermgmtEndpoint: /services/RemoteUserStoreManagerService
      usermgmtPassword: admin
      multitenancyEndpoint: /services/TenantMgtAdminService
      multitenancyPassword: admin
      
    # Apache NiFi
    - name: Apache NiFi
      componentId: nifi
      scope: components/nifi
      implementation: it.smartcommunitylab.orgmanager.componentsmodel.DefaultComponentImpl
      roles: ROLE_MANAGER,ROLE_MONITOR
      host: https://localhost:8443
      listUsersApi: /nifi-api/tenants/users
      createUserApi: /nifi-api/tenants/users
      deleteUserApi: /nifi-api/tenants/users/
      listUserGroupsApi: /nifi-api/tenants/user-groups
      createUserGroupApi: /nifi-api/tenants/user-groups
      updateUserGroupApi: /nifi-api/tenants/user-groups/
      deleteUserGroupApi: /nifi-api/tenants/user-groups/
      getPolicyApi: /nifi-api/policies/
      createPolicyApi: /nifi-api/policies
      updatePolicyApi: /nifi-api/policies/
      listProcessGroupsApi: /nifi-api/process-groups/
      getProcessGroupApi: /nifi-api/process-groups/
      createProcessGroupApi: /nifi-api/process-groups/
      deleteProcessGroupApi: /nifi-api/process-groups/
      accessApi: /nifi-api/access
      keystorePath: /certs/admin.p12
      keystoreType: PKCS12
      keystoreExportPassword: password
      truststorePath: /certs/truststore.jks
      truststoreType: JKS
      truststorePassword: password
      adminName: admin
      ownerRole: ROLE_PROVIDER
      readRoles: ROLE_MONITOR
      writeRoles: ROLE_MANAGER
      
    # WSO2 DSS
    - name: Data Services Server
      componentId: dss
      scope: components/dss
      format: ^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$
      implementation: it.smartcommunitylab.orgmanager.componentsmodel.DefaultComponentImpl
      roles: ROLE_MANAGER,ROLE_USER
      
    # Cyclotron
    - name: Cyclotron
      componentId: cyclotron
      scope: components/cyclotron
      implementation: it.smartcommunitylab.orgmanager.componentsmodel.DefaultComponentImpl
      roles: ROLE_MANAGER,ROLE_USER
      
    # Superset
    - name: Superset
      componentId: superset
      scope: components/superset
      implementation: it.smartcommunitylab.orgmanager.componentsmodel.DefaultComponentImpl
      roles: ROLE_MANAGER,ROLE_USER
      
    # Geoserver
    - name: Geoserver
      componentId: geoserver
      scope: components/geoserver
      implementation: it.smartcommunitylab.orgmanager.componentsmodel.DefaultComponentImpl
      roles: ROLE_MANAGER,ROLE_USER
